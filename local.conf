[[post-config|$NOVA_CONF]]
[DEFAULT]
api_rate_limit = False

[[post-config|$NEUTRON_CONF]]
[service_providers]
#service_provider=LOADBALANCER:Haproxy:neutron.services.loadbalancer.drivers.haproxy.plugin_driver.HaproxyOnHostPluginDriver:default
#service_provider=LOADBALANCER:HostingDevice:neutron.services.loadbalancer.drivers.hosting_device.plugin_driver.HostingDevicePluginDriver

#[[post-config|/$Q_PLUGIN_CONF_FILE]]
#

[[local|localrc]]
# preparation
# set -x

NEUTRON_ONLY=False
#NEUTRON_ONLY=True
NEUTRON_ONLY=$(trueorfalse $NEUTRON_ONLY)
function neutron_only() {
    [[ "$NEUTRON_ONLY" == "True" ]]
}

SERVICE_HOST=198.175.107.121
MY_HOST=$(ip -f inet route show dev eth0 scope link | awk '{print $5}')
function is_service_host() {
    [[ "x${MY_HOST}" = "x${SERVICE_HOST}" ]]
}
LOCAL_ADDRS=${SERVICE_HOST},${MY_HOST},0.0.0.0
if [[ -n $no_proxy ]]; then
    export no_proxy=${no_proxy},${LOCAL_ADDRS}
else
    export no_proxy=${LOCAL_ADDRS}
fi
if ! is_service_host || neutron_only ; then
    disable_all_services
fi

#
#OFFLINE=True
RECLONE=False
#RECLONE=True
GIT_BASE=https://git.openstack.org	# avoid git:// to address firewall
VERBOSE=True
ENABLE_DEBUG_LOG_LEVEL=True
ENABLE_VERBOSE_LOG_LEVEL=True

# LOG
LOGFILE=$DEST/logs/stack/stack.sh.log
SCREEN_LOGDIR=$DEST/logs/screen

# EXTRA_OPTS=api_rate_limit=False

# database: mysql
if is_service_host; then
    enable_service mysql
fi
DATABASE_TYPE=mysql
MYSQL_HOST=${SERVER_HOST}
MYSQL_USER=root
MYSQL_PASSWORD=mysql-password

# message queue: rabbit mq
if is_service_host; then
    enable_service rabbit
fi
RABBIT_HOST=${SERVER_HOST}
RABBIT_PASSWORD=rabbit-password

#
SERVICE_TOKEN=service-token
SERVICE_PASSWORD=service-password
ADMIN_PASSWORD=admin-password

# network
FIXED_RANGE=10.254.1.0/24
NETWORK_GATEWAY=10.254.1.1
LOGDAYS=1

if is_service_host && ! neutron_only ; then
   # glance
   enable_service g-api
   enable_service g-reg

   # nova
   enable_service n-api
   enable_service n-crt
   enable_service n-obj
   enable_service n-cond
   enable_service n-sch
   enable_service n-novnc
   enable_service n-cauth

   # cinder
   enable_service c-sch
   enable_service c-api

   enable_service horizon
   enable_service rabbit
   enable_service mysql
   # enable_service tempest
fi

if ! neutron_only; then
   enable_service n-cpu
   enable_service c-vol
   enable_service cinder
fi

# neutron
# Q_PLUGIN
disable_service n-net
enable_service q-agt

if is_service_host; then
   enable_service q-svc
   enable_service q-dhcp
   enable_service q-meta
   enable_service q-l3
   enable_service q-lbaas
   # enable_service q-vpn
   enable_service q-fwaas
   enable_service q-servicevm
   enable_service q-servicevm-agent
fi

enable_service neutron

#
#Q_AUTH_STRATEGY=noauth
Q_AUTH_STRATEGY=keystone

Q_SERVICE_PLUGIN_CLASSES=neutron.services.l3_router.l3_router_plugin.L3RouterPlugin,neutron.services.loadbalancer.plugin.LoadBalancerPlugin,neutron.services.firewall.fwaas_plugin.FirewallPlugin,neutron.vm.plugin.ServiceVMPlugin

#
Q_PLUGIN=openvswitch

# Q_SRV_EXTRA_OPTS	# Plugin       `OVS` (for Open Vswitch) or `LINUX_BRIDGE` (for LinuxBridge)
# Q_AGENT_EXTRA_AGENT_OPTS	# Plugin       AGENT
# Q_AGENT_EXTRA_SRV_OPTS	# Plugin       `OVS` (for Open Vswitch) or `LINUX_BRIDGE` (for LinuxBridge)
# Q_SRV_EXTRA_DEFAULT_OPTS	# Service      DEFAULT

# ML2
# VLAN configuration
Q_PLUGIN=ml2
# ENABLE_TENANT_VLANS=True


# repo/branch
CEILOMETER_BRANCH=stable/havana
CINDER_BRANCH=stable/havana
GLANCE_BRANCH=stable/havana
HORIZON_BRANCH=stable/havana
#KEYSTONE_BRANCH=stable/havana
KEYSTONE_BRANCH=stable/master
NOVA_BRANCH=stable/havana
OSLOCFG_BRANCH=stable/havana
# OSLOMSG_BRANCH=stable/havana

# CEILOMETERCLIENT_BRANCH=stable/havana
# CINDERCLIENT_BRANCH=stable/havana
# KEYSTONECLIENT_BRANCH=stable/havana
# NOVACLIENT_BRANCH=stable/havana
# OPENSTACKCLIENT_BRANCH=stable/havana
# NEUTRONCLIENT_BRANCH=stable/havana

NEUTRON_REPO=/home/yamahata/openstack/neutron/adv-svc/neutron-repo
#NEUTRON_BRANCH=bp/adv-services-in-vms
NEUTRON_BRANCH=my-19
